#version 440

#ifndef RAY_TRACER_CONFIG_GLSL
#define RAY_TRACER_CONFIG_GLSL

struct Ray
{
	vec3 Origin;
	vec3 Direction;
};

struct Sphere
{
	vec3 Position;
	float Radius;
};

vec3 GetPoint(Ray ray, float Par)
{
	return ray.Origin + ray.Direction * Par;
}

layout (std140, set = 1, binding = 0) uniform CameraUniform
{
	vec3 Position;
	vec3 Direction;
	vec3 Tangent;
	vec3 Bitangent;
} uCamera;

layout (std430, set = 1, binding = 1) buffer SphereBuffer
{
	Sphere data[];
} sSpheres;

layout(std140, set = 1, binding = 2) uniform SceneInfo
{
	ivec2 ImageResolution;
	uint SphereCount;
} uSceneInfo;

#endif

#ifndef COLLISIONS_GLSL
#define COLLISIONS_GLSL

#ifndef RAY_TRACER_CONFIG_GLSL
#define RAY_TRACER_CONFIG_GLSL

struct Ray
{
	vec3 Origin;
	vec3 Direction;
};

struct Sphere
{
	vec3 Position;
	float Radius;
};

vec3 GetPoint(Ray ray, float Par)
{
	return ray.Origin + ray.Direction * Par;
}

layout (std140, set = 1, binding = 0) uniform CameraUniform
{
	vec3 Position;
	vec3 Direction;
	vec3 Tangent;
	vec3 Bitangent;
} uCamera;

layout (std430, set = 1, binding = 1) buffer SphereBuffer
{
	Sphere data[];
} sSpheres;

layout(std140, set = 1, binding = 2) uniform SceneInfo
{
	ivec2 ImageResolution;
	uint SphereCount;
} uSceneInfo;

#endif


struct CollisionInfo
{
	bool HitOccured;
	float RayDis;
	vec3 Normal;
};

CollisionInfo CheckRaySphereCollision(Ray ray, Sphere sphere)
{
	vec3 Dir = ray.Direction;
	vec3 Diff = sphere.Position - ray.Origin;

	float DotProduct = dot(Dir, Diff);
	float DirMag = dot(Dir, Dir);
	float DiffMag = dot(Diff, Diff);
	
	float Disc = DotProduct * DotProduct - DirMag * DirMag * (DiffMag * DiffMag - sphere.Radius * sphere.Radius);

	CollisionInfo info;
	info.HitOccured = (Disc >= 0.0);
	info.RayDis = info.HitOccured ? (DotProduct - sqrt(Disc)) / (DirMag * DirMag) : -1.0f;
	info.Normal = info.HitOccured ? vec3(1.0) : vec3(0.0);

	return info;
}

#endif

layout (local_size_x = 8, local_size_y = 4) in;

layout (set = 0, binding = 0, rgba8) uniform image2D ColorBuffer;

vec4 TraceRay(Ray ray)
{
	Sphere firstSphere = sSpheres.data[0];
	CollisionInfo info = CheckRaySphereCollision(ray, firstSphere);

	return info.HitOccured ? vec4(1.0, 1.0, 1.0, 1.0) : vec4(0.0f, 0.0f, 0.0f, 0.0f);
}

void main()
{
	uvec2 Position = gl_GlobalInvocationID.xy;

	//Position.y = uSceneInfo.ImageResolution.y - Position.y;

	if(Position.x >= uSceneInfo.ImageResolution.x || Position.y >= uSceneInfo.ImageResolution.y)
		return;

	vec2 RawOffset = (Position - uSceneInfo.ImageResolution / 2.0) / uSceneInfo.ImageResolution;
	RawOffset.y = -RawOffset.y;

	Ray ray;
	ray.Origin = uCamera.Position;
	ray.Direction = uCamera.Direction + 
		(uCamera.Tangent * RawOffset.x + uCamera.Bitangent * RawOffset.y);

	vec4 Color = TraceRay(ray);
	
	imageStore(ColorBuffer, ivec2(Position), Color);
}
