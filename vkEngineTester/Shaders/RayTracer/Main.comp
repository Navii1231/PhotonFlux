#version 440

#ifndef PBR_RENDER
#define PBR_RENDER
#endif

#include "RayTracer.glsl"

layout (local_size_x = 8, local_size_y = 4) in;

layout (set = 0, binding = 0, rgba8) uniform image2D ImageOutput;
layout (set = 0, binding = 1, rgba32f) uniform image2D ColorSum;

layout (std430, set = 2, binding = 0) writeonly buffer CPU_Feedback
{
	uint Finished;
} uCPU_Feedback;

void main()
{
	uvec2 Position = gl_GlobalInvocationID.xy;
	//Position.x = 0;

	sRandomGeneratorSeed = Position.x * uSceneInfo.RandomSeed + Position.y * 
		(Position.x + uSceneInfo.RandomSeed) + uSceneInfo.RandomSeed;

	ivec2 ImageResolution = uSceneInfo.MaxBound - uSceneInfo.MinBound;
	
	if(Position.x >= (uSceneInfo.MaxBound - uSceneInfo.MinBound).x ||
		Position.y >= (uSceneInfo.MaxBound - uSceneInfo.MinBound).y)
		return;

	ivec2 PositionOnImage = ivec2(Position) + uSceneInfo.MinBound;
	
	vec2 RawOffset = (vec2(PositionOnImage) - vec2(uSceneInfo.ImageResolution) / 2.0) /
		vec2(uSceneInfo.ImageResolution);
	
	RawOffset.y *= 900.0 / 1600.0;
	
	RawOffset *= 2.0;
	//RawOffset /= 8.0;
	
	Ray ray;
	ray.Origin = uCamera.Position;
	ray.Direction = normalize(uCamera.Direction + 
		(uCamera.Tangent * RawOffset.x - uCamera.Bitangent * RawOffset.y));
	
	vec3 IncomingLight = vec3(0.0);
	
	for(int i = 0; i < uSceneInfo.PixelSamples; i++)
		IncomingLight += TraceRayMonteCarlo(ray);
	
	IncomingLight /= uSceneInfo.PixelSamples;

	vec3 ExistingColor = imageLoad(ColorSum, ivec2(Position)).rgb;

	vec3 Delta = IncomingLight - ExistingColor;
	vec3 Color = ExistingColor + Delta / uSceneInfo.FrameCount;
	
	if(bool(uSceneInfo.ResetImage))
		Color = IncomingLight;

	vec3 FinalColor = ToneMap(Color, 0.5);
	FinalColor = GammaCorrection(FinalColor);

	if(uSceneInfo.FrameCount > 100)
	{
		// TODO: If something like 10 consecutive frames have their mean differences
		// less than some threshold value, then we terminate...

		vec3 PercentageChange = (Color - ExistingColor) / ExistingColor;

		atomicAnd(uCPU_Feedback.Finished, uint(length(PercentageChange) < 0.01));

		if(length(Color - ExistingColor) < 0.0001)
			atomicAnd(uCPU_Feedback.Finished, 1);
	}
	else
	{
		uCPU_Feedback.Finished = 0;
	}

	if(uSceneInfo.FrameCount * uSceneInfo.PixelSamples > uSceneInfo.MaxSamples)
		uCPU_Feedback.Finished = 1;

	imageStore(ColorSum, ivec2(Position), vec4(Color, 1.0));
	imageStore(ImageOutput, ivec2(Position + uSceneInfo.MinBound), vec4(FinalColor, 1.0));
}
